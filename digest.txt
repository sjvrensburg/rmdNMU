Directory structure:
└── /./
    ├── README.md
    ├── .Rhistory
    ├── NAMESPACE
    ├── R/
    │   ├── prac.R
    │   └── short_notes.R
    ├── man/
    │   ├── short_notes.Rd
    │   ├── html_prac.Rd
    │   └── pdf_prac.Rd
    ├── LICENSE.md
    ├── inst/
    │   └── rmarkdown/
    │       └── templates/
    │           ├── short_notes/
    │           │   ├── skeleton/
    │           │   │   └── skeleton.Rmd
    │           │   ├── resources/
    │           │   │   ├── cross-references.lua
    │           │   │   ├── preamble.tex
    │           │   │   └── custom-boxes.lua
    │           │   └── template.yaml
    │           └── prac_or_lab/
    │               ├── skeleton/
    │               │   └── skeleton.Rmd
    │               ├── resources/
    │               │   ├── nmu.css
    │               │   └── nmu.tex
    │               └── template.yaml
    ├── rmdNMU.Rproj
    ├── DESCRIPTION
    └── .Rbuildignore

================================================
File: /README.md
================================================
# rmdNMU: R Markdown Templates for Nelson Mandela University

<!-- badges: start -->
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)
<!-- badges: end -->

## Overview

The `rmdNMU` package provides R Markdown templates designed for use at Nelson Mandela University's Statistics Department. These templates implement the university's branding guidelines, following colours and fonts specified in the [Nelson Mandela University Digital Brand Guide](https://staff.mandela.ac.za/staff/media/Store/documents/InstID/Manual/Nelson-Mandela-University-Digital-Brand-Guide.pdf).

## Installation

You can install the development version of rmdNMU from [GitHub](https://github.com/) with:

```r
# Install the remotes package if you haven't already
if (!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}

# Install rmdNMU
remotes::install_github("sjvrensburg/rmdNMU")
```

### Prerequisites

To use PDF output formats, you need a working LaTeX installation. We recommend using TinyTeX, a lightweight LaTeX distribution designed for R Markdown:

```r
install.packages("tinytex")
tinytex::install_tinytex()
```

For more information about TinyTeX, see the [official documentation](https://yihui.org/tinytex/).

## Available Templates

### 1. Practical/Lab Template

This template is designed for creating practical assignments and lab exercises.

#### Features:
- Clean, professional layout with NMU branding
- Available in both HTML and PDF formats
- Built-in support for code chunks and output
- Structured metadata for student and course information

#### Usage:
```r
# For HTML output
output: rmdNMU::html_prac

# For PDF output
output: rmdNMU::pdf_prac
```

#### Template-specific YAML options:
```yaml
student_number: "123456789"
name: "Name"
surname: "Surname"
module: "STAT312"
type: "Practical"
number: 1
```

### 2. Short Notes Template

This template is designed for creating lecture notes, handouts, or brief technical documents.

#### Features:
- Professional academic styling with NMU branding
- Custom box environments for examples, warnings, and important notes
- Full LaTeX capabilities with custom preamble
- Support for mathematical notation and theorems

#### Usage:
```r
output: rmdNMU::short_notes
```

#### Special Box Environments:
```markdown
::: {.examplebox name="Title"}
Content goes here
:::

::: {.importantbox name="Key Point"}
Content goes here
:::

::: {.warningbox name="Caution"}
Content goes here
:::

::: {.notebox name="Note"}
Content goes here
:::

::: {.tipbox name="Tip"}
Content goes here
:::
```

## Usage in RStudio

The easiest way to use these templates is through RStudio:

1. Click File → New File → R Markdown...
2. In the dialogue box, click "From Template"
3. Select either "Computer Lab or Practical Exercises" or "Short Notes"
4. Click "OK"

## Colour Scheme

The templates use Nelson Mandela University's official colours:

- Primary Blue: #141C2B
- Secondary Blue: #132E51
- Primary Yellow: #FFCC00
- Secondary Yellow: #F9B22A
- Grey: #999999

Faculty-specific colours are also available in the LaTeX templates:

- Humanities: #FFB51B
- Education: #F14F13
- Business: #6C284F
- Sciences: #006B34
- Health: #82B74A
- Engineering: #57BCE9
- Law: #5E6EBA
- Ocean Sciences: #00AFAA

### Using Colors in LaTeX Documents

All colours are predefined in the LaTeX templates and can be accessed using their LaTeX names:

Primary Colours:
```latex
\color{nmuprimaryblue}{Text in primary blue}
\color{nmusecondaryblue}{Text in secondary blue}
\color{nmuprimaryyellow}{Text in primary yellow}
\color{nmusecondaryyellow}{Text in secondary yellow}
\color{nmugrey}{Text in grey}
```

Faculty Colours:
```latex
\color{nmuhumanities}{Humanities text}
\color{nmueducation}{Education text}
\color{nmubusiness}{Business text}
\color{nmusciences}{Sciences text}
\color{nmuhealth}{Health text}
\color{nmuengineering}{Engineering text}
\color{nmulaw}{Law text}
\color{nmuocean}{Ocean Sciences text}
```

You can use these colors in any LaTeX context, for example:
```latex
{\color{nmuprimaryblue} This entire paragraph will be in NMU primary blue.}

\textcolor{nmuhealth}{Just this text will be in health sciences green.}

\begin{itemize}
\item[\textcolor{nmuprimaryyellow}{$\bullet$}] Item with yellow bullet point
\end{itemize}
```

## Contributing

Contributions are welcome! Please feel free to submit a pull request.

## License

This project is licensed under the GPL-3 License - see the [LICENSE.md](LICENSE.md) file for details.

## Author

Stéfan Janse van Rensburg (stefanj@mandela.ac.za)
ORCID: 0000-0002-0749-2277


================================================
File: /NAMESPACE
================================================
# Generated by roxygen2: do not edit by hand

export(html_prac)
export(pdf_prac)
export(short_notes)


================================================
File: /R/prac.R
================================================
#' Render HTML Document With NMU Format
#'
#' @param toc Logical, include table of contents. Default is FALSE.
#'
#' @return R Markdown output format to pass to render.
#' @export
html_prac <- function(toc = FALSE) {

  css <- system.file("rmarkdown/templates/prac_or_lab/resources/nmu.css",
                     package = "rmdNMU")

  # call the base html_document function
  rmarkdown::html_document(fig_width = 6.5,
                           fig_height = 4,
                           highlight = 'tango',
                           theme = 'cosmo',
                           css = css,
                           self_contained = TRUE)
}

#' Render PDF Document With NMU-Like Format
#'
#' @param ... Additional arguments to [rmarkdown::pdf_document()]
#' @param keep_tex A boolean toggle to select whether intermediate
#'   LaTeX files are to be kept, defaults to `FALSE`
#'
#' @return R Markdown output format to pass to render.
#' @export
pdf_prac <- function(..., keep_tex=FALSE) {
  template <- system.file(
    "rmarkdown/templates/prac_or_lab/resources/nmu.tex",
    package = "rmdNMU")
  base <- inherit_pdf_document(
    ..., template = template,
    keep_tex = keep_tex)
  base$knitr$opts_chunk$prompt    <- FALSE
  base$knitr$opts_chunk$comment   <- '# '
  base$knitr$opts_chunk$highlight <- TRUE

  return(base)
}

# Call rmarkdown::pdf_document and mark the return value as inheriting pdf_document
inherit_pdf_document <- function(...){
  fmt <- rmarkdown::pdf_document(highlight = "tango", ...)
  fmt$inherits <- "pdf_document"
  return(fmt)
}


================================================
File: /R/short_notes.R
================================================
#' Render PDF Document With NMU Short Notes Format
#'
#' @param ... Additional arguments to [rmarkdown::pdf_document()]
#' @param keep_tex A boolean toggle to select whether intermediate
#'   LaTeX files are to be kept, defaults to `TRUE`
#'
#' @return R Markdown output format to pass to render.
#' @export
short_notes <- function(..., keep_tex=TRUE) {
  # Get the paths to our resources
  template <- system.file(
    "rmarkdown/templates/short_notes/resources/preamble.tex",
    package = "rmdNMU")

  box_filter <- system.file(
    "rmarkdown/templates/short_notes/resources/custom-boxes.lua",
    package = "rmdNMU")

  # Base format
  fmt <- rmarkdown::pdf_document(
    ...,
    template = "default",
    latex_engine = "lualatex",
    keep_tex = keep_tex,
    includes = list(in_header = template),
    pandoc_args = c(
      "--lua-filter", box_filter,
      "--number-sections",
      # These options help preserve our references
      "--preserve-tabs"#,
      #"--citeproc=false"
    )
  )

  return(fmt)
}


================================================
File: /man/short_notes.Rd
================================================
% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/short_notes.R
\name{short_notes}
\alias{short_notes}
\title{Render PDF Document With NMU Short Notes Format}
\usage{
short_notes(..., keep_tex = TRUE)
}
\arguments{
\item{...}{Additional arguments to \code{\link[rmarkdown:pdf_document]{rmarkdown::pdf_document()}}}

\item{keep_tex}{A boolean toggle to select whether intermediate
LaTeX files are to be kept, defaults to \code{TRUE}}
}
\value{
R Markdown output format to pass to render.
}
\description{
Render PDF Document With NMU Short Notes Format
}


================================================
File: /man/html_prac.Rd
================================================
% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prac.R
\name{html_prac}
\alias{html_prac}
\title{Render HTML Document With NMU Format}
\usage{
html_prac(toc = FALSE)
}
\arguments{
\item{toc}{Logical, include table of contents. Default is FALSE.}
}
\value{
R Markdown output format to pass to render.
}
\description{
Render HTML Document With NMU Format
}


================================================
File: /man/pdf_prac.Rd
================================================
% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prac.R
\name{pdf_prac}
\alias{pdf_prac}
\title{Render PDF Document With NMU-Like Format}
\usage{
pdf_prac(..., keep_tex = FALSE)
}
\arguments{
\item{...}{Additional arguments to \code{\link[rmarkdown:pdf_document]{rmarkdown::pdf_document()}}}

\item{keep_tex}{A boolean toggle to select whether intermediate
LaTeX files are to be kept, defaults to \code{FALSE}}
}
\value{
R Markdown output format to pass to render.
}
\description{
Render PDF Document With NMU-Like Format
}


================================================
File: /inst/rmarkdown/templates/short_notes/skeleton/skeleton.Rmd
================================================
---
title: "NMU Styled Document"
author: "Your Name"
date: "`r Sys.Date()`"
output: rmdNMU::short_notes
---

# Short Notes

## Example Usage

::: {.definition #vec-zeros-ones name="Vectors of Zeros and Ones"}
A vector of zeros, denoted $\mathbf{0}$, is a vector where all components are zero.
Similarly, a vector of ones, denoted $\mathbf{1}$, is a vector where all components are one.
:::

As we saw in \@ref(def:vec-zeros-ones), these special vectors have important properties.

::: {.theorem #special-vectors name="Properties of Special Vectors"}
Let $\mathbf{0}$ and $\mathbf{1}$ be vectors as defined in @ref(def:vec-zeros-ones). Then:

1. $\mathbf{0} + \mathbf{v} = \mathbf{v}$ for any vector $\mathbf{v}$
2. $\mathbf{1} \cdot \mathbf{1} = n$ where $n$ is the dimension
:::

::: {.examplebox name="Sample Calculation"}
Here's an example calculation:

```{r}
2 + 2
```
:::

::: {.importantbox name="Key Concept"}
Make sure to understand these fundamentals before proceeding.
:::

::: {.warningbox name="Common Mistakes"}
Be careful to avoid these errors in your analysis.
:::


================================================
File: /inst/rmarkdown/templates/short_notes/resources/cross-references.lua
================================================
function Cite (cite)
  -- Process only single citations
  if #cite.citations ~= 1 then
    return nil
  end

  local citation = cite.citations[1]
  -- Check if this is a reference
  if citation.mode == "NormalCitation" then
    -- Try to extract type and label
    local ref_type, label = citation.id:match("^(%a+):(.+)$")
    if ref_type and label then
      -- Return appropriate LaTeX reference command
      if ref_type == "def" then
        return pandoc.RawInline("latex", "\\hyperref[def:" .. label .. "]{Definition~\\ref*{def:" .. label .. "}}")
      elseif ref_type == "thm" then
        return pandoc.RawInline("latex", "\\hyperref[thm:" .. label .. "]{Theorem~\\ref*{thm:" .. label .. "}}")
      elseif ref_type == "lem" then
        return pandoc.RawInline("latex", "\\hyperref[lem:" .. label .. "]{Lemma~\\ref*{lem:" .. label .. "}}")
      elseif ref_type == "prop" then
        return pandoc.RawInline("latex", "\\hyperref[prop:" .. label .. "]{Proposition~\\ref*{prop:" .. label .. "}}")
      elseif ref_type == "cor" then
        return pandoc.RawInline("latex", "\\hyperref[cor:" .. label .. "]{Corollary~\\ref*{cor:" .. label .. "}}")
      elseif ref_type == "ex" then
        return pandoc.RawInline("latex", "\\hyperref[ex:" .. label .. "]{Example~\\ref*{ex:" .. label .. "}}")
      elseif ref_type == "rem" then
        return pandoc.RawInline("latex", "\\hyperref[rem:" .. label .. "]{Remark~\\ref*{rem:" .. label .. "}}")
      end
    end
    -- For any other reference, use a basic reference
    return pandoc.RawInline("latex", "\\ref{" .. citation.id .. "}")
  end
  return nil
end


================================================
File: /inst/rmarkdown/templates/short_notes/resources/preamble.tex
================================================
% Basic setup
\usepackage{fontspec}
\usepackage{geometry}
\usepackage{microtype}
\usepackage{xcolor}
\usepackage{graphicx}
\usepackage{titlesec}
\usepackage{parskip}
\usepackage{amsthm}
\usepackage{thmtools}
\usepackage[most]{tcolorbox}
\usepackage{emoji}
\usepackage{amsmath}
\usepackage{amsfonts}

% Font configuration
\setmainfont{Nunito Sans 10pt}[
    UprightFont = *-Regular,
    BoldFont = *-Bold,
    ItalicFont = *-Italic,
    BoldItalicFont = *-BoldItalic,
    Scale = MatchLowercase]

% Color definitions
% Primary colors
\definecolor{nmuprimaryblue}{HTML}{141C2B}
\definecolor{nmusecondaryblue}{HTML}{132E51}
\definecolor{nmuprimaryyellow}{HTML}{FFCC00}
\definecolor{nmusecondaryyellow}{HTML}{F9B22A}
\definecolor{nmugrey}{HTML}{999999}

% Faculty colors
\definecolor{nmuhumanities}{HTML}{FFB51B}
\definecolor{nmueducation}{HTML}{F14F13}
\definecolor{nmubusiness}{HTML}{6C284F}
\definecolor{nmusciences}{HTML}{006B34}
\definecolor{nmuhealth}{HTML}{82B74A}
\definecolor{nmuengineering}{HTML}{57BCE9}
\definecolor{nmulaw}{HTML}{5E6EBA}
\definecolor{nmuocean}{HTML}{00AFAA}

% Page setup
\geometry{a4paper, margin=2.54cm}

% Section formatting with brand colors and numbering
\titleformat{\section}
  {\Large\bfseries\color{nmuprimaryblue}}
  {\thesection}{1em}{}
\titleformat{\subsection}
  {\large\bfseries\color{nmusecondaryblue}}
  {\thesubsection}{1em}{}
\titleformat{\subsubsection}
  {\normalsize\bfseries\color{nmusecondaryblue}}
  {\thesubsubsection}{1em}{}

% Set default text color
\color{nmuprimaryblue}

% Commands for font weights
\newcommand{\nmulight}{\fontseries{l}\selectfont}
\newcommand{\nmuregular}{\fontseries{m}\selectfont}
\newcommand{\nmusemibold}{\fontseries{sb}\selectfont}
\newcommand{\nmubold}{\fontseries{b}\selectfont}
\newcommand{\nmuextrabold}{\fontseries{eb}\selectfont}
\newcommand{\nmublack}{\fontseries{k}\selectfont}

% Theorem environments setup
% Setup common formatting for all theorem-like environments
\declaretheoremstyle[
    headfont=\color{nmuprimaryblue}\nmusemibold,
    bodyfont=\normalfont,
    spaceabove=6pt,
    spacebelow=6pt,
    headpunct={.}
]{nmustyle}

% Enable section numbering
\setcounter{secnumdepth}{3}

% Standard theorem environments
\declaretheorem[
    style=nmustyle,
    name=Theorem,
    within=section
]{theorem}

\declaretheorem[
    style=nmustyle,
    name=Lemma,
    sibling=theorem
]{lemma}

\declaretheorem[
    style=nmustyle,
    name=Proposition,
    sibling=theorem
]{proposition}

\declaretheorem[
    style=nmustyle,
    name=Corollary,
    sibling=theorem
]{corollary}

% Definition-like environments
\declaretheoremstyle[
    headfont=\color{nmusecondaryblue}\nmusemibold,
    bodyfont=\normalfont,
    spaceabove=6pt,
    spacebelow=6pt,
    headpunct={.}
]{nmudefinitionstyle}

\declaretheorem[
    style=nmudefinitionstyle,
    name=Definition,
    numberwithin=section
]{definition}

\declaretheorem[
    style=nmudefinitionstyle,
    name=Example,
    sibling=definition
]{example}

% Remark-like environments
\declaretheoremstyle[
    headfont=\color{nmugrey}\nmuregular\itshape,
    bodyfont=\normalfont,
    spaceabove=6pt,
    spacebelow=6pt,
    headpunct={.}
]{nmuremarkstyle}

\declaretheorem[
    style=nmuremarkstyle,
    name=Remark,
    numberwithin=section
]{remark}

\declaretheorem[
    style=nmuremarkstyle,
    name=Note,
    sibling=remark
]{note}

% Define custom box environments
\newtcolorbox{warningbox}{
    enhanced,
    colback=red!5,
    colframe=red!80!black,
    arc=0mm,
    title={\large\emoji{warning} Warning},
    fonttitle=\nmusemibold,
    left=5mm,
    right=5mm,
    top=5mm,
    bottom=5mm
}

\newtcolorbox{ideabox}{
    enhanced,
    colback=nmuprimaryyellow!10,
    colframe=nmusecondaryyellow,
    arc=0mm,
    title={\large\emoji{light-bulb} Idea},
    fonttitle=\nmusemibold,
    left=5mm,
    right=5mm,
    top=5mm,
    bottom=5mm
}

\newtcolorbox{notebox}{
    enhanced,
    colback=nmuprimaryblue!5,
    colframe=nmuprimaryblue,
    arc=0mm,
    title={\large\emoji{memo} Note},
    fonttitle=\nmusemibold,
    left=5mm,
    right=5mm,
    top=5mm,
    bottom=5mm
}

\newtcolorbox{tipbox}{
    enhanced,
    colback=nmuocean!10,
    colframe=nmuocean,
    arc=0mm,
    title={\large\emoji{thought-balloon} Tip},
    fonttitle=\nmusemibold,
    left=5mm,
    right=5mm,
    top=5mm,
    bottom=5mm
}

\newtcolorbox{importantbox}{
    enhanced,
    colback=nmusciences!10,
    colframe=nmusciences,
    arc=0mm,
    title={\large\emoji{glowing-star} Important},
    fonttitle=\nmusemibold,
    left=5mm,
    right=5mm,
    top=5mm,
    bottom=5mm
}

\newtcolorbox{examplebox}{
    enhanced,
    colback=nmuengineering!10,
    colframe=nmuengineering,
    arc=0mm,
    title={\large\emoji{bar-chart} Example},
    fonttitle=\nmusemibold,
    left=5mm,
    right=5mm,
    top=5mm,
    bottom=5mm
}

% Cross-referencing setup (load hyperref near the end)
\usepackage{hyperref}
\usepackage{cleveref}

% Custom names for theorem-like environments in references
\providecommand{\defautorefname}{Definition}
\providecommand{\thmautorefname}{Theorem}
\providecommand{\lemautorefname}{Lemma}
\providecommand{\propautorefname}{Proposition}
\providecommand{\corautorefname}{Corollary}
\providecommand{\exautorefname}{Example}
\providecommand{\remarkautorefname}{Remark}
\providecommand{\noteautorefname}{Note}

% Setup cleveref names
\crefname{definition}{Definition}{Definitions}
\crefname{theorem}{Theorem}{Theorems}
\crefname{lemma}{Lemma}{Lemmas}
\crefname{proposition}{Proposition}{Propositions}
\crefname{corollary}{Corollary}{Corollaries}
\crefname{example}{Example}{Examples}
\crefname{remark}{Remark}{Remarks}
\crefname{note}{Note}{Notes}

% Hyperlink setup
\hypersetup{
    colorlinks=true,
    linkcolor=nmuprimaryblue,
    filecolor=nmuprimaryblue,
    urlcolor=nmuprimaryblue,
    citecolor=nmuprimaryblue
}


================================================
File: /inst/rmarkdown/templates/short_notes/resources/custom-boxes.lua
================================================
-- Table of supported box types and their LaTeX environments
local BOX_TYPES = {
  definition = {
    prefix = "def",
    begin = "\\begin{definition}[%s]\\label{def:%s}\n",
    ending = "\\end{definition}"
  },
  theorem = {
    prefix = "thm",
    begin = "\\begin{theorem}[%s]\\label{thm:%s}\n",
    ending = "\\end{theorem}"
  },
  lemma = {
    prefix = "lem",
    begin = "\\begin{lemma}[%s]\\label{lem:%s}\n",
    ending = "\\end{lemma}"
  },
  proposition = {
    prefix = "prop",
    begin = "\\begin{proposition}[%s]\\label{prop:%s}\n",
    ending = "\\end{proposition}"
  },
  corollary = {
    prefix = "cor",
    begin = "\\begin{corollary}[%s]\\label{cor:%s}\n",
    ending = "\\end{corollary}"
  },
  example = {
    prefix = "ex",
    begin = "\\begin{example}[%s]\\label{ex:%s}\n",
    ending = "\\end{example}"
  },
  remark = {
    prefix = "rem",
    begin = "\\begin{remark}[%s]\\label{rem:%s}\n",
    ending = "\\end{remark}"
  },
  -- Keep existing box types
  examplebox = {
    begin = "\\begin{examplebox}{%s}",
    ending = "\\end{examplebox}"
  },
  warningbox = {
    begin = "\\begin{warningbox}{%s}",
    ending = "\\end{warningbox}"
  },
  ideabox = {
    begin = "\\begin{ideabox}{%s}",
    ending = "\\end{ideabox}"
  },
  notebox = {
    begin = "\\begin{notebox}{%s}",
    ending = "\\end{notebox}"
  },
  tipbox = {
    begin = "\\begin{tipbox}{%s}",
    ending = "\\end{tipbox}"
  },
  importantbox = {
    begin = "\\begin{importantbox}{%s}",
    ending = "\\end{importantbox}"
  }
}

-- Main filter function for Div elements
function Div(el)
  -- Get the first class as the box type
  local env_type = el.classes[1]

  -- If no valid type, return unchanged
  if not BOX_TYPES[env_type] then
    return el
  end

  -- Get name and ID from attributes
  local name = el.attributes.name or ""
  local id = el.attributes.id or ""

  local blocks = pandoc.Blocks({})

  -- Add environment with label if it's a theorem-like environment
  if BOX_TYPES[env_type].prefix then
    blocks:extend(pandoc.Blocks({
      pandoc.RawBlock("latex", string.format(BOX_TYPES[env_type].begin, name, id))
    }))
  else
    -- Regular box environment
    blocks:extend(pandoc.Blocks({
      pandoc.RawBlock("latex", string.format(BOX_TYPES[env_type].begin, name))
    }))
  end

  -- Add content
  blocks:extend(pandoc.Blocks(el.content))

  -- Close environment
  blocks:extend(pandoc.Blocks({
    pandoc.RawBlock("latex", BOX_TYPES[env_type].ending)
  }))

  return blocks
end

-- Convert references to proper LaTeX references
function Str(el)
  -- Handle @ref(type:label) syntax
  local ref_type, ref_id = el.text:match("^@ref%((%w+):([^%)]+)%)")
  if ref_type and ref_id then
    -- For LaTeX output
    return pandoc.RawInline("latex", "\\autoref{" .. ref_type .. ":" .. ref_id .. "}")
  end
  -- Handle regular references
  return el
end

-- Handle other types of references (like \@ref)
function Code(el)
  -- Handle \@ref(type:label) syntax
  local ref_type, ref_id = el.text:match("^@ref%((%w+):([^%)]+)%)")
  if ref_type and ref_id then
    -- For LaTeX output
    return pandoc.RawInline("latex", "\\autoref{" .. ref_type .. ":" .. ref_id .. "}")
  end
  return el
end


================================================
File: /inst/rmarkdown/templates/short_notes/template.yaml
================================================
name: Short Notes
description: >
   Creates an R Markdown document with NMU-styled box environments, including
   example boxes, warning boxes, important boxes, and other custom environments
   that integrate with LaTeX output. Uses the NMU brand colors and styling.
create_dir: FALSE
create_rproj: FALSE


================================================
File: /inst/rmarkdown/templates/prac_or_lab/skeleton/skeleton.Rmd
================================================
---
# Student to edit the student_number, name and surname.
student_number: "123456789"
name: "Name"
surname: "Surname"
# Leturer should set the module, type and number
module: "STAT312"
type: "Practical"
number: 1
date: "`r format(Sys.Date(), '%d %B %Y')`"
# Do not edit the following...
title: "`r sprintf('%s: %s %02d', rmarkdown::metadata$module, rmarkdown::metadata$type, rmarkdown::metadata$number)`"
author: "`r rmarkdown::metadata$surname`, `r rmarkdown::metadata$name` (`r rmarkdown::metadata$student_number`)"
# If you want to knit to PDF, replace
# rmdNMU::html_prac
# with 
# rmdNMU::pdf_prac
output: rmdNMU::html_prac
---

```{r setup, include=FALSE, message=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# Set a new output hook to truncate text output
#   You can now set a chunk option `out.lines=n` to limit
#   output to n lines.
knitr::knit_hooks$set(output = function(x, options) {
  if (!is.null(n <- options$out.lines)) {
    x <- xfun::split_lines(x)
    if (length(x) > n) {
      # truncate the output
      x <- c(head(x, n), "....TRUNCATED OUTPUT...\n")
    }
    x <- paste(x, collapse = "\n")
  }
  hook_output(x, options)
})
```

## `rmdNMU`'s `Practical` Template

The `Practical` template in the `rmdNMU` package is intended for R practicals. Lecturers should complete the appropriate information in the `YAML` section at the top of the file and write questions/instructions for students in the body of the file. See the following short guide on using R Markdown. Alternatively, consult the resources on the [R Markdown website](https://rmarkdown.rstudio.com/docs/articles/rmarkdown.html).

## R Markdown: A Brief Overview

**R Markdown** is a powerful tool that allows you to create dynamic documents that seamlessly integrate code, its output (like graphs and tables), and explanatory text. This makes it ideal for data analysis, reporting, and sharing results.

### Basic Markdown Syntax

Markdown is a lightweight markup language, meaning you use simple symbols to format your text. Here are some common examples:

- **Headers:**
  - `# H1` for largest header
  - `## H2` for smaller header
  - `### H3` and so on
- **Emphasis:**
  - _italics_
  - **bold**
- **Lists:**
  - Unordered: `* item`
  - Ordered: `1. item`
- **Links:**
  - `[link text](link url)`
- **Images:**
  - `![alt text](image path)`

### Embedding R Code

To include R code in your R Markdown document, enclose your code with three backticks (```). These are known as _code chunks_. Here is an example of an unnamed code code chunk.
```{r}
# This code chunk will show both the code and result from executing code.
the_answer <- 37 + sqrt(5^2)
the_answer
```
When you "knit" your R Markdown document (convert it to another format like HTML, PDF, or Word), the R code within these chunks is executed, and the results are incorporated into the final document.

Note that there are many options to control the output of code chunks, such as whether to include the code, the output, or both. It is also a code idea to always name your code chunks. For example:
```{r this_is_my_name, echo=FALSE, dev='png', fig.align='left'}
# This code chunk is named: "this_is_my_name"
# It will not show your code since echo=FALSE.
# It will output the result of the code.
data("PlantGrowth") # Built-in dataset

PlantGrowth |>
  ggplot(aes(x = weight, y = group, fill = group)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  ggtitle("Plant Growth", subtitle = "Under three different treatments")
```

It is also possible to include in line code. For example, remember that `the_answer` was `r the_answer`.


================================================
File: /inst/rmarkdown/templates/prac_or_lab/resources/nmu.css
================================================
/* Define the primary and secondary colors */
:root {
    --color-primary-text: #061C2C;
    --color-background: #FFFFFF;
    --color-link: #103A5C;
    --color-link-hover: #0B2D47;
    --color-highlight: #F9B42A;
    --color-highlight-light: #FABE45;
    --color-code-background: #e7e7e7;
}

/* Import the fonts */
@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap');

/* General styles */
body {
    background-color: var(--color-background);
    color: var(--color-primary-text);
    font-family: 'Noto Sans', sans-serif;
    margin: 0;
    padding: 0;
    line-height: 1.6;
}

.title {
    text-align: center;
    font-size: 2em; /* Adjust the size as needed */
    margin-top: 1em;
    margin-bottom: 1em;
    font-weight: bold;
    color: var(--color-primary-text);
}

h1, h2, h3, h4, h5, h6 {
    color: var(--color-primary-text);
    font-weight: bold;
}

p {
    margin: 0 0 1em;
}

/* Link styles */
a {
    color: var(--color-link);
    text-decoration: none;
}

a:hover {
    color: var(--color-link-hover);
    text-decoration: underline;
}

/* Highlight styles */
.highlight {
    background-color: var(--color-highlight);
    color: var(--color-background);
    padding: 0.2em 0.4em;
    border-radius: 4px;
}

.highlight-light {
    background-color: var(--color-highlight-light);
    color: var(--color-background);
    padding: 0.2em 0.4em;
    border-radius: 4px;
}

/* Monospaced font style */
code, pre {
    font-family: 'JetBrains Mono', monospace;
    background-color: var(--color-code-background);
    color: var(--color-primary-text);
    padding: 0.2em 0.4em;
    border-radius: 4px;
}

pre {
    overflow-x: auto;
    padding: 1em;
}

/* Additional elements and customization */
button {
    background-color: var(--color-highlight);
    color: var(--color-background);
    border: none;
    padding: 0.6em 1em;
    font-family: 'Noto Sans', sans-serif;
    cursor: pointer;
    border-radius: 4px;
}

button:hover {
    background-color: var(--color-highlight-light);
}

input, textarea {
    font-family: 'Noto Sans', sans-serif;
    border: 1px solid var(--color-primary-text);
    padding: 0.4em;
    border-radius: 4px;
}


================================================
File: /inst/rmarkdown/templates/prac_or_lab/resources/nmu.tex
================================================
\documentclass[11pt,a4paper]{article}

% Required packages
\usepackage{parskip}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{graphicx}
\usepackage{xcolor}
\usepackage{hyperref}
\usepackage{titlesec}
\usepackage{fancyhdr}
\usepackage{geometry}
\usepackage{listings}
\usepackage{longtable}
\usepackage{booktabs}
\usepackage{amsmath}
\usepackage{booktabs}
\usepackage{amsfonts}
\usepackage{nicefrac}
\usepackage{microtype}
\usepackage{array}

\usepackage{babel}

% Define colors
\definecolor{primaryText}{HTML}{061C2C}
\definecolor{background}{HTML}{FFFFFF}
\definecolor{link}{HTML}{103A5C}
\definecolor{linkHover}{HTML}{0B2D47}
\definecolor{highlight}{HTML}{F9B42A}
\definecolor{highlightLight}{HTML}{FABE45}
\definecolor{codeBackground}{HTML}{e7e7e7}

% Set page geometry
\geometry{margin=1.25in}

% Set fonts (approximating Nunito Sans and JetBrains Mono)
\usepackage{helvet}
\renewcommand{\familydefault}{\sfdefault}
\usepackage{inconsolata}

% Customize hyperlinks
\hypersetup{
    colorlinks=true,
    linkcolor=link,
    filecolor=link,
    urlcolor=link,
}

% Customize titles
\titleformat*{\section}{\Large\bfseries\color{primaryText}}
\titleformat*{\subsection}{\large\bfseries\color{primaryText}}
\titleformat*{\subsubsection}{\normalsize\bfseries\color{primaryText}}

% Customize code listings
\lstset{
    backgroundcolor=\color{codeBackground},
    basicstyle=\footnotesize\ttfamily,
    breakatwhitespace=false,
    breaklines=true,
    captionpos=b,
    commentstyle=\color{gray},
    extendedchars=true,
    frame=single,
    keepspaces=true,
    keywordstyle=\color{blue},
    language=R,
    numbers=left,
    numbersep=5pt,
    numberstyle=\tiny\color{gray},
    rulecolor=\color{black},
    showspaces=false,
    showstringspaces=false,
    showtabs=false,
    stepnumber=1,
    stringstyle=\color{orange},
    tabsize=4,
    title=\lstname
}

% Custom commands
\newcommand{\highlight}[1]{\colorbox{highlight}{\textcolor{white}{#1}}}
\newcommand{\highlightlight}[1]{\colorbox{highlightLight}{\textcolor{white}{#1}}}

% Tightlist environment when using "-" for bullet points.
\setlength{\emergencystretch}{3em} % prevent overfull lines
\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}

% Highlighting code chuncks
$if(highlighting-macros)$
$highlighting-macros$
$endif$

\usepackage{setspace}
\onehalfspacing

% CSL referencing
$if(csl-refs)$
\newlength{\cslhangindent}
\setlength{\cslhangindent}{1.5em}
\newlength{\csllabelwidth}
\setlength{\csllabelwidth}{3em}
\newlength{\cslentryspacingunit} % times entry-spacing
\setlength{\cslentryspacingunit}{\parskip}
\newenvironment{CSLReferences}[2] % #1 hanging-ident, #2 entry spacing
 {% don't indent paragraphs
  \setlength{\parindent}{0pt}
  % turn on hanging indent if param 1 is 1
  \ifodd #1
  \let\oldpar\par
  \def\par{\hangindent=\cslhangindent\oldpar}
  \fi
  % set entry spacing
  \setlength{\parskip}{#2\cslentryspacingunit}
 }%
 {}
\usepackage{calc}
\newcommand{\CSLBlock}[1]{#1\hfill\break}
\newcommand{\CSLLeftMargin}[1]{\parbox[t]{\csllabelwidth}{#1}}
\newcommand{\CSLRightInline}[1]{\parbox[t]{\linewidth - \csllabelwidth}{#1}\break}
\newcommand{\CSLIndent}[1]{\hspace{\cslhangindent}#1}
$endif$

% Customize maketitle
\makeatletter
\renewcommand{\maketitle}{%
    \begin{center}
        {\huge\textbf{\color{primaryText}\@title}\par}
        \vspace{0.5em}
        {\large\color{primaryText}\@author\par}
        \vspace{0.5em}
        {\large\color{primaryText}\@date\par}
    \end{center}
    \vspace{1em}
}
\makeatother

% Title, author, date
\title{$title$}
\author{$author$}
\date{$date$}

% Options for packages loaded elsewhere
\PassOptionsToPackage{unicode$for(hyperrefoptions)$,$hyperrefoptions$$endfor$}{hyperref}
\PassOptionsToPackage{hyphens}{url}
$if(colorlinks)$
\PassOptionsToPackage{dvipsnames,svgnames,x11names}{xcolor}
$endif$
$if(CJKmainfont)$
\PassOptionsToPackage{space}{xeCJK}
$endif$

% Additional packages and settings from default.latex
\usepackage{iftex}
\ifPDFTeX
  \usepackage[$if(fontenc)$$fontenc$$else$T1$endif$]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{textcomp} % provide euro and other symbols
\else % if luatex or xetex
$if(mathspec)$
  \ifXeTeX
    \usepackage{mathspec} % this also loads fontspec
  \else
    \usepackage{unicode-math} % this also loads fontspec
  \fi
$else$
  \usepackage{unicode-math} % this also loads fontspec
$endif$
  \defaultfontfeatures{Scale=MatchLowercase}
  \defaultfontfeatures[\rmfamily]{Ligatures=TeX,Scale=1}
\fi

$if(zero-width-non-joiner)$
%% Support for zero-width non-joiner characters.
\makeatletter
\def\zerowidthnonjoiner{%
  % Prevent ligatures and adjust kerning, but still support hyphenating.
  \texorpdfstring{%
    \TextOrMath{\nobreak\discretionary{-}{}{\kern.03em}%
      \ifvmode\else\nobreak\hskip\z@skip\fi}{}%
  }{}%
}
\makeatother
\ifPDFTeX
  \DeclareUnicodeCharacter{200C}{\zerowidthnonjoiner}
\else
  \catcode`^^^^200c=\active
  \protected\def ^^^^200c{\zerowidthnonjoiner}
\fi
%% End of ZWNJ support
$endif$

% Use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}

$if(verbatim-in-note)$
\usepackage{fancyvrb}
$endif$

$if(listings)$
\usepackage{listings}
\newcommand{\passthrough}[1]{#1}
\lstset{defaultdialect=[5.3]Lua}
\lstset{defaultdialect=[x86masm]Assembler}
$endif$

$if(lhs)$
\lstnewenvironment{code}{\lstset{language=Haskell,basicstyle=\small\ttfamily}}{}
$endif$

$if(tables)$
\usepackage{longtable,booktabs,array}
$if(multirow)$
\usepackage{multirow}
$endif$
\usepackage{calc} % for calculating minipage widths
$endif$

$if(graphics)$
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth\else\Gin@nat@width\fi}
\def\maxheight{\ifdim\Gin@nat@height>\textheight\textheight\else\Gin@nat@height\fi}
\makeatother
% Scale images if necessary, so that they will not overflow the page
% margins by default, and it is still possible to overwrite the defaults
% using explicit options in \includegraphics[width, height, ...]{}
\setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
% Set default figure placement to htbp
\makeatletter
\def\fps@figure{htbp}
\makeatother
$endif$

$if(svg)$
\usepackage{svg}
$endif$

$if(strikeout)$
$-- also used for underline
\ifLuaTeX
  \usepackage{luacolor}
  \usepackage[soul]{lua-ul}
\else
  \usepackage{soul}
$if(CJKmainfont)$
  \ifXeTeX
    % soul's \st doesn't work for CJK:
    \usepackage{xeCJKfntef}
    \renewcommand{\st}[1]{\sout{#1}}
  \fi
$endif$
\fi
$endif$

$if(subfigure)$
\usepackage{subcaption}
$endif$

$if(block-headings)$
% Make \paragraph and \subparagraph free-standing
\makeatletter
\ifx\paragraph\undefined\else
  \let\oldparagraph\paragraph
  \renewcommand{\paragraph}{
    \@ifstar
      \xxxParagraphStar
      \xxxParagraphNoStar
  }
  \newcommand{\xxxParagraphStar}[1]{\oldparagraph*{#1}\mbox{}}
  \newcommand{\xxxParagraphNoStar}[1]{\oldparagraph{#1}\mbox{}}
\fi
\ifx\subparagraph\undefined\else
  \let\oldsubparagraph\subparagraph
  \renewcommand{\subparagraph}{
    \@ifstar
      \xxxSubParagraphStar
      \xxxSubParagraphNoStar
  }
  \newcommand{\xxxSubParagraphStar}[1]{\oldsubparagraph*{#1}\mbox{}}
  \newcommand{\xxxSubParagraphNoStar}[1]{\oldsubparagraph{#1}\mbox{}}
\fi
\makeatother
$endif$

$if(pagestyle)$
\pagestyle{$pagestyle$}
$endif$

$if(lang)$
\ifLuaTeX
\usepackage[bidi=basic]{babel}
\else
\usepackage[bidi=default]{babel}
\fi
$if(babel-lang)$
\babelprovide[main,import]{$babel-lang$}
$if(mainfont)$
\ifPDFTeX
\else
\babelfont{rm}[$for(mainfontoptions)$$mainfontoptions$$sep$,$endfor$$if(mainfontfallback)$,RawFeature={fallback=mainfontfallback}$endif$]{$mainfont$}
\fi
$endif$
$endif$
$for(babel-otherlangs)$
\babelprovide[import]{$babel-otherlangs$}
$endfor$
$for(babelfonts/pairs)$
\babelfont[$babelfonts.key$]{rm}{$babelfonts.value$}
$endfor$
% get rid of language-specific shorthands (see #6817):
\let\LanguageShortHands\languageshorthands
\def\languageshorthands#1{}
$endif$

\ifLuaTeX
  \usepackage{selnolig}  % disable illegal ligatures
\fi

$if(dir)$
\ifPDFTeX
  \TeXXeTstate=1
  \newcommand{\RL}[1]{\beginR #1\endR}
  \newcommand{\LR}[1]{\beginL #1\endL}
  \newenvironment{RTL}{\beginR}{\endR}
  \newenvironment{LTR}{\beginL}{\endL}
\fi
$endif$

$if(natbib)$
\usepackage[$natbiboptions$]{natbib}
\bibliographystyle{$if(biblio-style)$$biblio-style$$else$plainnat$endif$}
$endif$

$if(biblatex)$
\usepackage[$if(biblio-style)$style=$biblio-style$,$endif$$for(biblatexoptions)$$biblatexoptions$$sep$,$endfor$]{biblatex}
$for(bibliography)$
\addbibresource{$bibliography$}
$endfor$
$endif$

$if(nocite-ids)$
\nocite{$for(nocite-ids)$$it$$sep$, $endfor$}
$endif$

$if(csquotes)$
\usepackage{csquotes}
$endif$

\IfFileExists{xurl.sty}{\usepackage{xurl}}{} % add URL line breaks if available
\urlstyle{$if(urlstyle)$$urlstyle$$else$same$endif$}

$if(links-as-notes)$
% Make links footnotes instead of hotlinks:
\DeclareRobustCommand{\href}[2]{#2\footnote{\url{#1}}}
$endif$

$if(verbatim-in-note)$
\VerbatimFootnotes % allow verbatim text in footnotes
$endif$

\usepackage{bookmark}

% Document start
\begin{document}

\maketitle

$body$

\end{document}


================================================
File: /inst/rmarkdown/templates/prac_or_lab/template.yaml
================================================
name: "Computer Lab or Practical Exercises"
description: >
   A template for practicals or lab assignments.
create_dir: FALSE
create_rproj: FALSE


================================================
File: /rmdNMU.Rproj
================================================
Version: 1.0
ProjectId: 4defbb8c-39a1-41a5-bcb4-92c77eaa8ddf

RestoreWorkspace: No
SaveWorkspace: No
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: XeLaTeX

AutoAppendNewline: Yes
StripTrailingWhitespace: Yes
LineEndingConversion: Posix

BuildType: Package
PackageUseDevtools: Yes
PackageInstallArgs: --no-multiarch --with-keep.source
PackageRoxygenize: rd,collate,namespace


================================================
File: /DESCRIPTION
================================================
Package: rmdNMU
Title: Nelson Mandela University R Markdown Templates
Version: 1.0.2.0000
Authors@R: 
    person("Stéfan", "Janse van Rensburg", , "stefanj@mandala.ac.za", role = c("aut", "cre"),
           comment = c(ORCID = "0000-0002-0749-2277"))
Description: R Markdown templates for Nelson Mandela University's Statistics Department
License: GPL (>= 3)
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.2
Imports:
    rmarkdown,
    knitr,
    tinytex
